#!/usr/bin/env python
#
# sts - STS with elliptic curve.
# Version 1.0
# Year 2014
# Author Alexandre PUJOL <alexandre.pujol.1@etu.univ-amu.fr>
# Author Maxime CHEMIN <maxime.chemin@etu.univ-amu.fr>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License.
#

import argparse
import socket
import struct
from elliptic import EllipticCurve
from tools import *
from STS import STS
from stools import stools

""" Station To Station
 Input :
 - Elliptic curve (default : curves/w256-001.gp)
 - ECDSA keys pairs (default : keys/ecdsa and keys/ecdsa.pub)
 - Host or IP (default : localhost)
 - Host's port (default : 12800)
 Output :
 - Shared secret (default : keys/sts.shared)
"""
def sts():
   print(":: Station To Station (STS)")
   if arg.server is not False and arg.host is not False:
      raise Exception('Argument error : --server and --host cannot be together')
      
   if arg.curve is False:
      arg.curve = 'curves/w256-001.gp'
      
   if arg.key is False:
      arg.key = 'keys/ecdsa'
      
   if arg.host is False:
      arg.host = 'localhost'
      
   if arg.port is False:
      arg.port = 12800
   else:
      arg.port = int(arg.port)
      
   if arg.output is False:
      arg.output = 'keys/sts.shared'
      
   print(" Loading elliptic curve : " + arg.curve)
   curve = tools.loadCurve(arg.curve)
   
   print(" Reading ECDSA keys pair : ")
   print("  - Public key (certificat) : " + arg.key + ".pub")
   (curve2, ecdsa_publickey) = key.readKey(arg.key + ".pub")
   print("  - Private key             : " + arg.key)
   (curve3, ecdsa_privatekey) = key.readKey(arg.key)
   if curve != curve2 or curve != curve3:
      raise Exception('ECDSA keys are not on the same curve than DH secret')
   
   sts = STS(curve)
   
   print(" Generating STS secret : x")
   x = sts.keygen()
   
   print(" Computing : g^x")
   gx = sts.secret(x)
   
   # Exchanges : 
   # - Get  : g^y
   # - Send : g^x, cert, AES(g^xy, ECDSA("(g^y,g^x)"))
   # - The first user create the server (with --server)
   # - The second server is the client
   if arg.server is True:
      server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
      server.bind(('', arg.port))
      server.listen(1)
      print(" Server started")
      print(" Waiting for client connection...")
      (exchange, address) = server.accept()
      print(" Server connected to : " + str(address))
   else:
      exchange = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
      exchange.connect((arg.host, arg.port))
      print(" Client started")
      print(" Connected to : " + arg.host + " on port " + str(arg.port))
   
   if not stools.curve_exchange(exchange, sts.curve):
      raise Exception('Client and server are not on the same curve')
      
   gy = stools.secret_exchange(arg.server, exchange, gx)
   
   print(" Computing shared secret : g^xy")
   print(" Signing and encrypting : \"(g^y,g^x)\"")
   (gxy, encrypted, iv) = sts.sharedsecret(ecdsa_privatekey, x, gx, gy)
   
   (certificat_new, encrypted_new, iv_new) = stools.sharedsecret_exchange(arg.server, exchange, ecdsa_publickey, encrypted, iv)
      
   print(" Closing connection")
   exchange.close()
   if arg.server is True:
      server.close() 
   
   #print("x         : " + str(x))
   #print("gx        : " + str(gx))
   #print("gy        : " + str(gy))
   #print("iv        : " + str(iv_new))
   #print("encrypted : " + str(encrypted_new))
   #print("certificat: " + str(certificat_new))
   
   print(" Verification")
   if sts.verifysecret(certificat_new, x, gx, gy, encrypted_new, iv_new) is True:
      print(" => The signature has been verified.")
      print(" Writing the shared secret : " + arg.output)
      key.writeKey(arg.output, 'DIFFIEHELLMAN', curve, gxy)
   else:
      print(" => The signature cannot ben verified.")
      print(" STS aborded")
      
      
if __name__ == "__main__":
   
   parser = argparse.ArgumentParser(description='STS with elliptic curve.')
   parser.add_argument( '-c', '--curve',
                        action='store', default=False, dest='curve',
                        help='Load a specific elliptic curve')
   parser.add_argument( '-k', '--key',
                        action='store', default=False, dest='key',
                        help='Load ECDSA keys')
   parser.add_argument( '--host',
                        action='store', default=False, dest='host',
                        help='Hostname or IP of the server')
   parser.add_argument( '--port',
                        action='store', default=False, dest='port',
                        help='Hostname\'s port')
   parser.add_argument( '-o', '--output',
                        action='store', default=False, dest='output',
                        help='Output file')
   parser.add_argument( '-s', '--server',
                        action='store_true', default=False, dest='server',
                        help='Create the server')
   parser.add_argument( '-v', '--version', 
                        action='version', version='%(prog)s 1.0')
   arg = parser.parse_args()

sts()
