#!/usr/bin/env python
#
# ecdsa - ECDSA with elliptic curve.
# Version 1.0
# Year 2014
# Author Alexandre PUJOL <alexandre.pujol.1@etu.univ-amu.fr>
# Author Maxime CHEMIN <maxime.chemin@etu.univ-amu.fr>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License.
#

import argparse
from tools import *
from elliptic import *
from ECDSA import *


""" Generate ecdsa keys
 Input :
 - Curve (default : curves/w256-001.gp)
 Output :
 - Public key (default : keys/ecdsa.pub)
 - Private key (default : keys/ecdsa)
"""
def Keygen():
   print(":: Keygen")
   
   if results.key is not False or results.input is not False:
      raise Exception('Argument error')
   
   if results.curve is False:
      results.curve = 'curves/w256-001.gp'

   if results.output is False:
      results.output = 'keys/ecdsa'
      
   print(" Load curve : " + results.curve)
   curve = tools.loadCurve(results.curve)
   
   ecdsa = ECDSA(curve)
   
   print(" Generate keys")
   (publickey, privatekey) = ecdsa.keygen()
   
   print(" Write keys")
   key.writeKey(results.output+'.pub', 'ECDSA', curve, publickey)
   key.writeKey(results.output, 'ECDSA', curve, privatekey)



""" Sign a file
 Input :
 - Private key (default : keys/ecdsa)
 - Message (default : sample/text)
 Output :
 - Signed message (default : sample/text.signed)
"""
def Sign():
   print(":: Sign")
   
   if results.curve is not False:
      raise Exception('Argument error')
      
   if results.key is False:
      results.key = 'keys/ecdsa'
      
   if results.input is False:
      results.input = 'sample/text'
      
   if results.output is False:
      results.output = 'sample/text.signed'
      
   print(" Read privatekey key : " + results.key)
   (curve, privatekey) = key.readKey(results.key)
   
   print(" Read message : " + results.input)
   m = tools.readFile(results.input)
   m = m.encode('utf-8')
   
   print(" Sign the message")
   ecdsa = ECDSA(curve)
   (r, s) = ecdsa.sign(privatekey, m)    
   
   print(" Write the signed message : " + results.output)
   signed = str(r) + "\n" + str(s)
   tools.writeFile(results.output, signed)



""" Verify the signature
 Input :
 - Public key (default : keys/ecdsa.pub)
 - Signed files (default : sample/text and sample/text.signed)
"""
def Verif():
   print(":: Verif")
   
   if results.curve is not False or results.output is not False:
      raise Exception('Argument error')
      
   if results.key is False:
      results.key = 'keys/ecdsa.pub'
      
   if results.input is False:
      results.input = 'sample/text'
      
   print(" Read public key : " + results.key)
   (curve, publickey) = key.readKey(results.key)
   
   print(" Read the file " + results.input)
   m = tools.readFile(results.input)
   m = m.encode('utf-8')
   
   print(" Read the signed : " + results.input + ".signed")
   signed = tools.readFile(results.input + ".signed").split('\n')
   r = int(signed[0])
   s = int(signed[1])
   
   print(" Verify the signature")
   ecdsa = ECDSA(curve)
   
   if ecdsa.verif(publickey, m, r, s) is True:
      print(" => The signature has been verified.")
   else:
      print(" => The signature cannot ben verified.")


parser = argparse.ArgumentParser(description='ECDSA with elliptic curve.')
parser.add_argument( '-K','--keygen',
                     action='store_const', dest='prgm', const='keygen',
                     help='Generate key')
parser.add_argument( '-S', '--sign',
                     action='store_const', dest='prgm', const='sign',
                     help='Sign a file')
parser.add_argument( '-V', '--verif',
                     action='store_const', dest='prgm', const='verif',
                     help='Verify the signature')
parser.add_argument( '-c', '--curve',
                     action='store', default=False, dest='curve',
                     help='Load  curve')
parser.add_argument( '-k', '--key',
                     action='store', default=False, dest='key',
                     help='Load  key')
parser.add_argument( '-i', '--input',
                     action='store', default=False, dest='input',
                     help='Input')
parser.add_argument( '-o', '--output',
                     action='store', default=False, dest='output',
                     help='Output')
parser.add_argument( '-v', '--version', 
                     action='version', version='%(prog)s 1.0')
results = parser.parse_args()

if results.prgm is 'keygen':
   Keygen()
elif results.prgm is 'sign':
   Sign()
elif results.prgm is 'verif':
   Verif()
else:
   raise Exception('Argument error')
   
