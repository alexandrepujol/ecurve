#!/usr/bin/env python
#
# ecdsa - ECDSA with elliptic curve.
# Version 1.0
# Year 2014
# Author Alexandre PUJOL <alexandre.pujol.1@etu.univ-amu.fr>
# Author Maxime CHEMIN <maxime.chemin@etu.univ-amu.fr>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License.
#

import argparse
from ecurve.tools import *
from ecurve.elliptic import EllipticCurve
from ecurve.ECDSA import ECDSA

""" Generate ecdsa keys
 Input :
 - Curve (default : curves/w256-001.gp)
 Output :
 - Public key (default : keys/ecdsa.pub)
 - Private key (default : keys/ecdsa)
"""
def Keygen():
   print(":: Keygen")
   
   if arg.key is not False or arg.input is not False:
      raise Exception('Argument error')
   
   if arg.curve is False:
      arg.curve = 'curves/w256-001.gp'

   if arg.output is False:
      arg.output = 'keys/ecdsa'
      
   print(" Loading the curve : " + arg.curve)
   curve = tools.loadCurve(arg.curve)
   
   ecdsa = ECDSA(curve)
   
   print(" Generating ECDSA keys")
   (publickey, privatekey) = ecdsa.keygen()
   
   print(" Writing ECDSA keys")
   print("  - Public key  : " + arg.output + ".pub")
   key.writeKey(arg.output + '.pub', 'ECDSA', curve, publickey)
   print("  - Private key : " + arg.output)
   key.writeKey(arg.output, 'ECDSA', curve, privatekey)



""" Sign a file
 Input :
 - Private key (default : keys/ecdsa)
 - Message (default : sample/text)
 Output :
 - Signed message (default : sample/text.signed)
"""
def Sign():
   print(":: Sign")
   
   if arg.curve is not False:
      raise Exception('Argument error')
      
   if arg.key is False:
      arg.key = 'keys/ecdsa'
      
   if arg.input is False:
      arg.input = 'sample/text'
      
   if arg.output is False:
      arg.output = 'sample/text.signed'
      
   print(" Reading the private key : " + arg.key)
   (curve, privatekey) = key.readKey(arg.key)
   
   print(" Signing : " + arg.input)
   m = tools.readFile(arg.input).encode('utf-8')
   ecdsa = ECDSA(curve)
   (r, s) = ecdsa.sign(privatekey, m)    
   
   print(" Writing the signed file : " + arg.output)
   with open(arg.output, "w") as signed:
      signed.write(str(r) + "\n" + str(s))
      signed.close()



""" Verify the signature
 Input :
 - Public key (default : keys/ecdsa.pub)
 - Signed files (default : sample/text and sample/text.signed)
"""
def Verif():
   print(":: Verif")
   
   if arg.curve is not False or arg.output is not False:
      raise Exception('Argument error')
      
   if arg.key is False:
      arg.key = 'keys/ecdsa.pub'
      
   if arg.input is False:
      arg.input = 'sample/text'
      
   print(" Reading the public key : " + arg.key)
   (curve, publickey) = key.readKey(arg.key)
   
   print(" Reading the message " + arg.input)
   m = tools.readFile(arg.input)
   m = m.encode('utf-8')
   
   print(" Reading the signed : " + arg.input + ".signed")
   signed = tools.readFile(arg.input + ".signed").split('\n')
   r = int(signed[0])
   s = int(signed[1])
   
   print(" Verifing the signature")
   ecdsa = ECDSA(curve)
   
   if ecdsa.verif(publickey, m, r, s) is True:
      print(" => The signature has been verified.")
   else:
      print(" => The signature cannot ben verified.")
      
      
if __name__ == "__main__":

   parser = argparse.ArgumentParser(description='ECDSA with elliptic curve.')
   parser.add_argument( '-K','--keygen',
                        action='store_const', dest='prgm', const='keygen',
                        help='Generate ECDSA keys pair')
   parser.add_argument( '-S', '--sign',
                        action='store_const', dest='prgm', const='sign',
                        help='Sign a file')
   parser.add_argument( '-V', '--verif',
                        action='store_const', dest='prgm', const='verif',
                        help='Verify the signature')
   parser.add_argument( '-c', '--curve',
                        action='store', default=False, dest='curve',
                        help='Load a specific elliptic curve')
   parser.add_argument( '-k', '--key',
                        action='store', default=False, dest='key',
                        help='Load a ECDSA key (public or private)')
   parser.add_argument( '-i', '--input',
                        action='store', default=False, dest='input',
                        help='File intput')
   parser.add_argument( '-o', '--output',
                        action='store', default=False, dest='output',
                        help='File ouptut')
   parser.add_argument( '-v', '--version', 
                        action='version', version='%(prog)s 1.0')
   arg = parser.parse_args()

   if arg.prgm is 'keygen':
      Keygen()
   elif arg.prgm is 'sign':
      Sign()
   elif arg.prgm is 'verif':
      Verif()
   else:
      raise Exception('Argument error')
      
