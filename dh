#!/usr/bin/env python
#
# dh - Diffie Hellman with elliptic curve.
# Version 1.0
# Year 2014
# Author Alexandre PUJOL <alexandre.pujol.1@etu.univ-amu.fr>
# Author Maxime CHEMIN <maxime.chemin@etu.univ-amu.fr>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License.
#

import argparse
import socket
from elliptic import EllipticCurve
from diffiehellman import Diffiehellman
from tools import *
from stools import stools

""" Generate Diffie Hellman keys
 Input :
 - Curve (default : curves/w256-001.gp)
 Output :
 - Private secret (default : keys/dh)
"""
def Keygen():
   print(":: Keygen")
   
   if arg.key is not False or arg.host is not False :
      raise Exception('Argument error')
   if arg.host is not False or arg.port is not False:
      raise Exception('Argument error')
      
   if arg.curve is False:
      arg.curve = 'curves/w256-001.gp'

   if arg.output is False:
      arg.output = 'keys/dh'
      
   print(" Load curve : " + arg.curve)
   curve = tools.loadCurve(arg.curve)
   
   dh = Diffiehellman(curve)
   
   print(" Generate keys")
   x = dh.keygen()
   
   print(" Write private DH secret" + arg.output)
   key.writeKey(arg.output, 'DIFFIEHELLMAN', curve, x)
   
   
""" Share
 Input :
 - Private secret (default : keys/dh)
 - Host (default : localhost)
 - Host's port (default : 12800)
 Output :
 - Shared secret (default : keys/dh.shared)
"""
def Share():
   print(":: Share key")
   
   if arg.curve is not False:
      raise Exception('Argument error')
      
   if arg.key is False:
      arg.key = 'keys/dh'
      
   if arg.host is False:
      arg.host = 'localhost'
      
   if arg.port is False:
      arg.port = 12800
   else:
      arg.port = int(results.port)
      
   if arg.output is False:
      arg.output = 'keys/dh.shared'
            
   print(" Read DH key : " + arg.key)
   (curve, x) = key.readKey(arg.key)
   
   dh = Diffiehellman(curve)
   
   print(" Compute : g^x")
   gx = dh.secret(x)
   
   # Exchanges
   if arg.server is True:
      server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
      server.bind(('', arg.port))
      server.listen(1)
      print(" Server started")
      print(" Waiting for client connection...")
      (exchange, address) = server.accept()
      print(" Server connected to : " + str(address))
   else:
      exchange = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
      exchange.connect((arg.host, arg.port))
      print(" Connected to : " + arg.host + " on port " + str(arg.port))

   gy = stools.secret_exchange(arg.server, exchange, gx)

   print(" Closing connection")
   exchange.close()
   if arg.server is True:
      server.close()
      
   gxy = dh.sharedsecret(x, gy)
   
   print(" Write shared secret in : " + arg.output)
   key.writeKey(arg.output, 'DIFFIEHELLMAN', curve, gxy)
   
parser = argparse.ArgumentParser(description='Diffie Hellman with elliptic curve.')
parser.add_argument( '-K','--keygen',
                     action='store_const', dest='prgm', const='keygen',
                     help='Generate Diffie Hellman private secret')
parser.add_argument( '-S', '--share',
                     action='store_const', dest='prgm', const='share',
                     help='Share key with an other computer')
parser.add_argument( '-c', '--curve',
                     action='store', default=False, dest='curve',
                     help='Load a specific elliptic curve ')
parser.add_argument( '-k', '--key',
                     action='store', default=False, dest='key',
                     help='Load  key')
parser.add_argument( '--host',
                     action='store', default=False, dest='host',
                     help='Hostname or IP of the other computer')
parser.add_argument( '--port',
                     action='store', default=False, dest='port',
                     help='Hostname\'s port')
parser.add_argument( '-o', '--output',
                     action='store', default=False, dest='output',
                     help='Output file')
parser.add_argument( '-s', '--server',
                     action='store_true', default=False, dest='server',
                     help='Create server connection')
parser.add_argument( '-v', '--version', 
                     action='version', version='%(prog)s 1.0')
arg = parser.parse_args()

if arg.prgm is 'keygen':
   Keygen()
elif arg.prgm is 'share':
   Share()
else:
   raise Exception('Argument error')
   
