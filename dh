#!/usr/bin/env python
#
# dh - Diffie Hellman with elliptic curve.
# Version 1.0
# Year 2014
# Author Alexandre PUJOL <alexandre.pujol.1@etu.univ-amu.fr>
# Author Maxime CHEMIN <maxime.chemin@etu.univ-amu.fr>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License.
#

import argparse
import socket
from ecurve.elliptic import EllipticCurve
from ecurve.diffiehellman import Diffiehellman
from ecurve.tools import *
from ecurve.stools import stools

""" Diffie Hellman
 Input :
 - Elliptic curve (default : curves/w256-001.gp)
 - Host or IP (default : localhost)
 - Host's port (default : 12800)
 Output :
 - Shared secret (default : keys/dh.shared)
"""
def dh():
   print(":: Diffie Hellman (DH)")
   
   if arg.server is not False and arg.host is not False:
      raise Exception('Argument error : --server and --host cannot be together')
      
   if arg.curve is False:
      arg.curve = 'curves/w256-001.gp'
      
   if arg.host is False:
      arg.host = 'localhost'
      
   if arg.port is False:
      arg.port = 12800
   else:
      arg.port = int(results.port)
      
   if arg.output is False:
      arg.output = 'keys/dh.shared'
      
   print(" Loading elliptic curve : " + arg.curve)
   curve = tools.loadCurve(arg.curve)
   
   dh = Diffiehellman(curve)
   
   print(" Generating DH secret : x")
   x = dh.secret()
   
   print(" Computing : g^x")
   gx = dh.gx(x)
   
   # Exchanges :
   # - Curve exchange : Server and client must be on the same curve
   # - Get  : g^y
   # - Send : g^x
   # - The first user create the server (with --server)
   # - The second server is the client
   if arg.server is True:
      server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
      server.bind(('', arg.port))
      server.listen(1)
      print(" Server started")
      print(" Waiting for client connection...")
      (exchange, address) = server.accept()
      print(" Server connected to : " + str(address))
   else:
      exchange = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
      exchange.connect((arg.host, arg.port))
      print(" Connected to : " + arg.host + " on port " + str(arg.port))
      
   if not stools.curve_exchange(exchange, dh.curve):
      raise Exception('Client and server are not on the same curve')
      
   gy = stools.secret_exchange(arg.server, exchange, gx)
   
   print(" Closing connection")
   exchange.close()
   if arg.server is True:
      server.close()
      
   gxy = dh.sharedsecret(x, gy)
   
   print(" Writing the shared secret : " + arg.output)
   key.writeKey(arg.output, 'DIFFIEHELLMAN', curve, gxy)
   
   
if __name__ == "__main__":

   parser = argparse.ArgumentParser(description='Diffie Hellman (DH) with elliptic curve.')
   parser.add_argument( '-c', '--curve',
                        action='store', default=False, dest='curve',
                        help='Load a specific elliptic curve ')
   parser.add_argument( '--host',
                        action='store', default=False, dest='host',
                        help='Hostname or IP of the server')
   parser.add_argument( '--port',
                        action='store', default=False, dest='port',
                        help='Hostname\'s port')
   parser.add_argument( '-o', '--output',
                        action='store', default=False, dest='output',
                        help='Output file')
   parser.add_argument( '-s', '--server',
                        action='store_true', default=False, dest='server',
                        help='Create server connection')
   parser.add_argument( '-v', '--version', 
                        action='version', version='%(prog)s 1.0')
   arg = parser.parse_args()
   
   dh()
   
